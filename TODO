## Tasks

- Use Model instead of hard coded CREATE and INSERT statements
- Execute single script at a time, instead of parts of a sql script.  (reference dbshell < script.sql)
- If it is a python file, import and execute the migrate() function with no arguments
- Scrap print statements for proper use of a logger
- Use following format for migration scripts filenames: ####[_short_comment].[sql|py]
- Detect CREATE statements and run django management command to create proper contenttypes


## Notes

- This has to be all or none.
  
  Meaning for new models, you can rely on syncdb if you 
  are using migrations.  If you try to do both it is very difficult to come up with a
  scheme where you know the order to execute things.  If you run syncdb first, there
  may be new models that depend on a migration that hasn't executed yet, and if you
  execute migrations first, a migration might depend on new models that haven't been
  created through syncdb yet.  Therefore, I think everything should be added to 
  migration scripts.
  
  http://code.djangoproject.com/browser/django/trunk/django/core/management/commands/syncdb.py#L54


- Should be able to run the migrations just like ./manage.py dbshell < migrations/0001_start.sql
  works.
  
 